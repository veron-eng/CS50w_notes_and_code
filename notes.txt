# lecture 3


can create a project using: 
django-admin startproject name_of_project

manage.py is one of teh auto created files, it will be used to execute commands in our files
settings.files is just stores our configurations
urls.py is a a table of contents, and a database of urls on the webapplication that i can visit

to run the django application:
python3 manage.py runserver

this runs the web application server


one project might have multiple applications, an app for shoping, an app for videos 
django allows for multiple apps 

to create a new app you can run the command:
python3 manage.py startapp name_of_app

so when you create your new app, you can go to settings and add it to a list of installed apps in settings.py in your main project's folder

so to have something be displayed when we go to our newly created app, we can go to the apps views.py page, 
each view is something a user might want to see. to create a view you have to define it in a fuction.
a default view is called an index and takes in a request parameter which is the request the user makes

we need to tell the app when to return this response, what url is the user going to visit for the app to return this response
we need to configure this, need to create a urls.py file, django automatically creates one in the project and you need to create one for 
each app. typically the index path in urls is written like this path("", views.index, name="index")
now in the projects urls page you need to add urls for the app aswell it is typically written like this: 
path('hello/', include("hello.urls"))

to mak eit more dynamic we can instead parameterise it by doing something like this path("<str:name>", views.greet, name="greet")

to seperate things you can move the html rendering else where, and the html that is called is normally stored in a templates folder

you can dynamically insert stuff into a templates by using {{ _insert_ }}

as css files are static they are generally kept in a static folder, 
and then in the html document you can import it using <link href="{% static 'newyear/styles.css '%}" rel="stylesheet">
and at the top of the document you put {% load static %}

there is something called template inheritence, if there is very little changing from page to page, you can introduce a base layout and 
change little things

there is a thing in django called name space collision. whwere 2 things have the same name, to get around this you have to
 declare app_name = "app name" in the applications urls.py page

 you can accociate a form with an action and a method add.html is an example of this

 CSRF error: cross site request forgery, an error that pops up if a form has a security vunerability, e.g someone on a different website, can trick a
 user into completing a form. to counteract this the form needs a csrf token everytime a form is displayed to the user it comes with a new csrf token

 in django forms client side validation is easy to implement, which is when it is done on the front end, this is easy to disable. 
 So server side rendering is also needed 

 so sometimes when we create a new method like the add method in tasks app, it can be called in 2 new ways once when you visit the '/add' page 
 which is a get request, and secondly when you post a new task which is a post request 

 sessions in django is a way for the application to remember who you are, and is able to store information about you
 django stores sessions information in tables and they are automatically created when you run the command manage.py migrations
 also in a html page you can insert {% empty %} if an array is empty then this will run



# lecture 4, SQL, Models and Migrations

sql - language to allow us to interact with databases
models - django allows to interact with sql and databases using models and objects
migrations - is a technique that allows to updates our database when something changes in our models

relational database - data stored in a table 

TEXT: For strings of text (Ex. a person’s name)
NUMERIC: A more general form of numeric data (Ex. A date or boolean value)
INTEGER: Any non-decimal number (Ex. a person’s age)
REAL: Any real number, decimal numbers (Ex. a person’s weight)
BLOB (Binary Large Object): Any other binary data that we may want to store in our database (Ex. an image)


to create a table use the command create table and then the name and then comma seperated values of the collums as well as there types, it is common
include a primary key 

can insert into a table using the command insert into and then the name of the table and then the comma seperated values that you want to include.

to get data out of the database:
SELECT * FROM flights;
The above command (*) retrieves all of the data from our flights table

if you only want to query particaular collums:
SELECT origin, destination FROM flights;

if you want to be even more particular: 
SELECT * FROM flights WHERE id = 3;
SELECT * FROM flights WHERE origin = "New York";
SELECT * FROM flights WHERE duration > 500;
SELECT * FROM flights WHERE duration > 500 AND destination = "Paris";
SELECT * FROM flights WHERE duration > 500 OR destination = "Paris";
SELECT * FROM flights WHERE origin IN ("New York", "Lima");
SELECT * FROM flights WHERE origin LIKE "%a%";


to update a table:
UPDATE flights
    SET duration = 430
    WHERE origin = "New York"
    AND destination = "London";

to delete something in the table: 
DELETE FROM flights WHERE destination = "Tokyo";

join table accociates one table with the ids of 2 tables 

JOIN queries help us query two tables together, and this returns a table back:
SELECT first, origin, destination
FROM flights JOIN passengers
ON passengers.flight_id = flights.id;

a way we can make our queries more efficient when dealing with large tables is to create an index similar to the index you might see 
in the back of a textbook. For example, if we know that we’ll often look up passengers by their last name, we could create an index from last
 name to id using the command:
CREATE INDEX name_index ON passengers (last);

A SQL injection attack is when a malicious user enters SQL code as input on a site in order to bypass the sites security measures
For example, let’s say we have a table storing usernames and passwords, and then a login form on the home site of a page. We may search for the user using a query such as:

SELECT * FROM users
WHERE username = username AND password = password;

A hacker, on the other hand, might type harry" -- as a username and nothing as a password. It turns out that -- stands for a comment in SQL, meaning the query would look like:
SELECT * FROM users
WHERE username = "harry"--" AND password = "12345";

he other main vulnerability when it comes to SQL is known as a Race Condition.

A race condition is a situation that occurs when multiple queries to a database occur simultaneously. 
When these are not adequately handled, problems can arise in the precise times that databases are updated.
One potential solution for this problem would be locking the database. We could not allow any other interaction with the database until 
one transaction has been completed.

Django Models are a level of abstraction on top of SQL that allow us to work with databases using Python classes and objects
rather than direct SQL queries.

to make the information we run: 
 
python manage.py makemigrations

and then to store it we run:

python manage.py migrate