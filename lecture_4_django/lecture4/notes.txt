can create a project using: 
django-admin startproject name_of_project

manage.py is one of teh auto created files, it will be used to execute commands in our files
settings.files is just stores our configurations
urls.py is a a table of contents, and a database of urls on the webapplication that i can visit

to run the django application:
python3 manage.py runserver

this runs the web application server


one project might have multiple applications, an app for shoping, an app for videos 
django allows for multiple apps 

to create a new app you can run the command:
python3 manage.py startapp name_of_app

so when you create your new app, you can go to settings and add it to a list of installed apps in settings.py in your main project's folder

so to have something be displayed when we go to our newly created app, we can go to the apps views.py page, 
each view is something a user might want to see. to create a view you have to define it in a fuction.
a default view is called an index and takes in a request parameter which is the request the user makes

we need to tell the app when to return this response, what url is the user going to visit for the app to return this response
we need to configure this, need to create a urls.py file, django automatically creates one in the project and you need to create one for 
each app. typically the index path in urls is written like this path("", views.index, name="index")
now in the projects urls page you need to add urls for the app aswell it is typically written like this: 
path('hello/', include("hello.urls"))

to mak eit more dynamic we can instead parameterise it by doing something like this path("<str:name>", views.greet, name="greet")

to seperate things you can move the html rendering else where, and the html that is called is normally stored in a templates folder

you can dynamically insert stuff into a templates by using {{ _insert_ }}

as css files are static they are generally kept in a static folder, 
and then in the html document you can import it using <link href="{% static 'newyear/styles.css '%}" rel="stylesheet">
and at the top of the document you put {% load static %}

there is something called template inheritence, if there is very little changing from page to page, you can introduce a base layout and 
change little things

there is a thing in django called name space collision. whwere 2 things have the same name, to get around this you have to
 declare app_name = "app name" in the applications urls.py page

 you can accociate a form with an action and a method add.html is an example of this

 CSRF error: cross site request forgery, an error that pops up if a form has a security vunerability, e.g someone on a different website, can trick a
 user into completing a form. to counteract this the form needs a csrf token everytime a form is displayed to the user it comes with a new csrf token

 in django forms client side validation is easy to implement, which is when it is done on the front end, this is easy to disable. 
 So server side rendering is also needed 

 so sometimes when we create a new method like the add method in tasks app, it can be called in 2 new ways once when you visit the '/add' page 
 which is a get request, and secondly when you post a new task which is a post request 

 sessions in django is a way for the application to remember who you are, and is able to store information about you
 django stores sessions information in tables and they are automatically created when you run the command manage.py migrations
 also in a html page you can insert {% empty %} if an array is empty then this will run
